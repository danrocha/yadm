# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# open iTerm
lctrl + alt + cmd - return : open -n -a iTerm
# open Warp
# lctrl + alt + cmd - return : open -n -a Warp

# open Finder
lctrl + alt + cmd - f : open -n ~/Downloads

# focus window
lctrl + alt + cmd - h : yabai -m window --focus west
lctrl + alt + cmd - j : yabai -m window --focus south
lctrl + alt + cmd - k : yabai -m window --focus north
# lctrl + alt + cmd - l : yabai -m window --focus east
lctrl + alt + cmd - x : yabai -m window --focus recent
lctrl + alt + cmd - z : yabai -m window --focus stack.prev
lctrl + alt + cmd - c : yabai -m window --focus stack.next


# swap managed window
lctrl + alt + cmd + shift - w : yabai -m window --swap north
lctrl + alt + cmd + shift - a : yabai -m window --swap west
lctrl + alt + cmd + shift - s : yabai -m window --swap south
lctrl + alt + cmd + shift - d : yabai -m window --swap east

# move managed window
lctrl + alt + cmd - w : yabai -m window --warp north
lctrl + alt + cmd - a : yabai -m window --warp west
lctrl + alt + cmd - s : yabai -m window --warp south
lctrl + alt + cmd - d : yabai -m window --warp east

# balance size of windows
lctrl + alt + cmd - b : yabai -m space --balance

# fast focus desktop
lctrl + alt + cmd - 1 : yabai -m space --focus 1 || skhd -k "ctrl + shift + cmd - 1"
lctrl + alt + cmd - 2 : yabai -m space --focus 2 || skhd -k "ctrl + shift + cmd - 2"
lctrl + alt + cmd - 3 : yabai -m space --focus 3 || skhd -k "ctrl + shift + cmd - 3"
lctrl + alt + cmd - 4 : yabai -m space --focus 4 || skhd -k "ctrl + shift + cmd - 4"
lctrl + alt + cmd - 5 : yabai -m space --focus 5 || skhd -k "ctrl + shift + cmd - 5"
lctrl + alt + cmd - 6 : yabai -m space --focus 6 || skhd -k "ctrl + shift + cmd - 6"
lctrl + alt + cmd - 7 : yabai -m space --focus 7 || skhd -k "ctrl + shift + cmd - 7"
lctrl + alt + cmd - 8 : yabai -m space --focus 8 || skhd -k "ctrl + shift + cmd - 8"
lctrl + alt + cmd - 9 : yabai -m space --focus 9 || skhd -k "ctrl + shift + cmd - 9"
lctrl + alt + cmd - 0 : yabai -m space --focus 10 || skhd -k "ctrl + shift + cmd - 10"

# fast focus previous and next desktop
lctrl + alt + cmd - up : yabai -m space --focus prev
lctrl + alt + cmd - down : yabai -m space --focus next

# create and destroy spaces
# lctrl + alt + cmd - x : yabai -m space --create
lctrl + alt + cmd + shift - x : yabai -m space --destroy

# send window to desktop and follow focus
lctrl + alt + cmd + shift - 1 : yabai -m window --space 1 --focus
lctrl + alt + cmd + shift - 2 : yabai -m window --space 2 --focus
lctrl + alt + cmd + shift - 3 : yabai -m window --space 3 --focus
lctrl + alt + cmd + shift - 4 : yabai -m window --space 4 --focus
lctrl + alt + cmd + shift - 5 : yabai -m window --space 5 --focus
lctrl + alt + cmd + shift - 6 : yabai -m window --space 6 --focus
lctrl + alt + cmd + shift - 7 : yabai -m window --space 7 --focus
lctrl + alt + cmd + shift - 8 : yabai -m window --space 8 --focus
lctrl + alt + cmd + shift - 9 : yabai -m window --space 9 --focus
lctrl + alt + cmd + shift - 0 : yabai -m window --space 0 --focus

# send window to previous and next desktop and follow focus
lctrl + alt + cmd + shift - up : yabai -m window --space  prev; yabai -m space --focus prev
lctrl + alt + cmd + shift - down : yabai -m window --space  next; yabai -m space --focus next

# focus monitor
# lctrl + alt + cmd - p : yabai -m display --focus recent

# send window to monitor and follow focus
# lctrl + alt + cmd + shift - p : yabai -m window --display recent; yabai -m display --focus recent

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# resize windows
lctrl + alt + cmd + shift - h : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
lctrl + alt + cmd + shift - j : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:50
lctrl + alt + cmd + shift - k : yabai -m window --resize top:0:-50; \
                  yabai -m window --resize bottom:0:-50
lctrl + alt + cmd + shift - l : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# focus monitor
ctrl + alt - x  : yabai -m display --focus recent
ctrl + alt - z  : yabai -m display --focus prev
ctrl + alt - c  : yabai -m display --focus next
ctrl + alt - 1  : yabai -m display --focus 1
ctrl + alt - 2  : yabai -m display --focus 2

# send window to monitor and follow focus
ctrl + cmd - x  : yabai -m window --display recent && yabai -m display --focus recent
ctrl + cmd - z  : yabai -m window --display prev && yabai -m display --focus prev
ctrl + cmd - c  : yabai -m window --display next && yabai -m display --focus next
ctrl + cmd - 1  : yabai -m window --display 1 && yabai -m display --focus 1
ctrl + cmd - 2  : yabai -m window --display 2 && yabai -m display --focus 2


# toggle window split type
lctrl + alt + cmd - r : yabai -m window --toggle split

# float / unfloat window (<rows>:<cols>:<start-x>:<start-y>:<width>:<height>)
# to the side of screen 
lctrl + alt + cmd - t : yabai -m window --toggle float;\
          yabai -m window --grid 10:5:3:1:2:8
# to the center of screen 
lctrl + alt + cmd - y : yabai -m window --toggle float;\
          yabai -m window --grid 20:20:1:1:18:18

# toggle sticky(+float), topmost, picture-in-picture
lctrl + alt + cmd - p : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle pip

# show all scratchpad windows if inaccessible due to yabai restart or crash
cmd + alt - r : yabai -m window --scratchpad recover
# toggle scratchpad windows or launch application if not running
cmd + alt - s : yabai -m window --toggle spotify || open  -a Spotify
cmd + alt - c : yabai -m window --toggle chatgpt || open  -a ChatGPT

# Restart Yabai
lctrl + alt + cmd - q : brew services restart yabai
lctrl + alt + cmd + shift - q : osascript -e 'tell app "System Events" to log out'
